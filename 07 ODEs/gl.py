#######################################################################
# implicit Gauss-Legendre method; symplectic for Hamilton EoM, A-stable
#######################################################################

from math import *
import numpy as np

#######################################################################

# 4-th order Butcher tableau
A2 = np.array([
	[0.25, 0.25 - 0.5/sqrt(3.0)],
	[0.25 + 0.5/sqrt(3.0), 0.25]
])

B2 = np.array([0.5, 0.5])

# 4-th order Gauss-Legendre step
def gl4(f, y, dt):
	n = y.size; g = np.zeros([2,n])
	for k in range(0,16):
		g = np.matmul(A2, g)
		g[0] = f(y + g[0]*dt)
		g[1] = f(y + g[1]*dt)
	return y + np.dot(B2, g)*dt

#######################################################################

# 6-th order Butcher tableau
A3 = np.array([
	[5.0/36.0, 2.0/9.0 - 1.0/sqrt(15.0), 5.0/36.0 - 0.5/sqrt(15.0)],
	[5.0/36.0 + sqrt(15.0)/24.0, 2.0/9.0, 5.0/36.0 - sqrt(15.0)/24.0],
	[5.0/36.0 + 0.5/sqrt(15.0), 2.0/9.0 + 1.0/sqrt(15.0), 5.0/36.0]
])

B3 = np.array([5.0/18.0, 4.0/9.0, 5.0/18.0])

# 6-th order Gauss-Legendre step
def gl6(f, y, dt):
	n = y.size; g = np.zeros([3,n])
	for k in range(0,16):
		g = np.matmul(A3, g)
		g[0] = f(y + g[0]*dt)
		g[1] = f(y + g[1]*dt)
		g[2] = f(y + g[2]*dt)
	return y + np.dot(B3, g)*dt

#######################################################################

# 8-th order Butcher tableau (in quad precision)
A4 = np.array([
	 0.869637112843634643432659873054998518E-1,
	-0.266041800849987933133851304769531093E-1,
	 0.126274626894047245150568805746180936E-1,
	-0.355514968579568315691098184956958860E-2,
	 0.188118117499868071650685545087171160E0,
	 0.163036288715636535656734012694500148E0,
	-0.278804286024708952241511064189974107E-1,
	 0.673550059453815551539866908570375889E-2,
	 0.167191921974188773171133305525295945E0,
	 0.353953006033743966537619131807997707E0,
	 0.163036288715636535656734012694500148E0,
	-0.141906949311411429641535704761714564E-1,
	 0.177482572254522611843442956460569292E0,
	 0.313445114741868346798411144814382203E0,
	 0.352676757516271864626853155865953406E0,
	 0.869637112843634643432659873054998518E-1
]).reshape([4,4])

B4 = np.array([
	 0.173927422568726928686531974610999704E0,
	 0.326072577431273071313468025389000296E0,
	 0.326072577431273071313468025389000296E0,
	 0.173927422568726928686531974610999704E0
])

# 8-th order Gauss-Legendre step
def gl8(f, y, dt):
	n = y.size; g = np.zeros([4,n])
	for k in range(0,16):
		g = np.matmul(A4, g)
		for i in range(0,4):
			g[i] = f(y + g[i]*dt)
	return y + np.dot(B4, g)*dt

#######################################################################

# 10-th order Butcher tableau (in quad precision)
A5 = np.array([
	 0.5923172126404727187856601017997934066E-1,
	-1.9570364359076037492643214050884060018E-2,
	 1.1254400818642955552716244215090748773E-2,
	-0.5593793660812184876817721964475928216E-2,
	 1.5881129678659985393652424705934162371E-3,
	 1.2815100567004528349616684832951382219E-1,
	 1.1965716762484161701032287870890954823E-1,
	-2.4592114619642200389318251686004016630E-2,
	 1.0318280670683357408953945056355839486E-2,
	-2.7689943987696030442826307588795957613E-3,
	 1.1377628800422460252874127381536557686E-1,
	 2.6000465168064151859240589518757397939E-1,
	 1.4222222222222222222222222222222222222E-1,
	-2.0690316430958284571760137769754882933E-2,
	 4.6871545238699412283907465445931044619E-3,
	 1.2123243692686414680141465111883827708E-1,
	 2.2899605457899987661169181236146325697E-1,
	 3.0903655906408664483376269613044846112E-1,
	 1.1965716762484161701032287870890954823E-1,
	-0.9687563141950739739034827969555140871E-2,
	 1.1687532956022854521776677788936526508E-1,
	 2.4490812891049541889746347938229502468E-1,
	 2.7319004362580148889172820022935369566E-1,
	 2.5888469960875927151328897146870315648E-1,
	 0.5923172126404727187856601017997934066E-1
]).reshape([5,5])

B5 = np.array([
	 1.1846344252809454375713202035995868132E-1,
	 2.3931433524968323402064575741781909646E-1,
	 2.8444444444444444444444444444444444444E-1,
	 2.3931433524968323402064575741781909646E-1,
	 1.1846344252809454375713202035995868132E-1
])

# 10-th order Gauss-Legendre step
def gl10(f, y, dt):
	n = y.size; g = np.zeros([5,n])
	for k in range(0,16):
		g = np.matmul(A5, g)
		for i in range(0,5):
			g[i] = f(y + g[i]*dt)
	return y + np.dot(B5, g)*dt

#######################################################################

# 12-th order Butcher tableau (in quad precision)
A6 = np.array([
	 4.28311230947925862600740355431832233817057E-2,
	-1.47637259971974124753725910605206514420005E-2,
	 9.32505070647775119143888450800314858828852E-3,
	-5.66885804948351190092125641621650656214377E-3,
	 2.85443331509933513092928583011602153367111E-3,
	-8.12780171264762112299135651562540066903980E-4,
	 9.26734914303788631865122917633203161433470E-2,
	 9.01903932620346518924583784594290279153839E-2,
	-2.03001022932395859524940805242724601067286E-2,
	 1.03631562402464237307199458065599778725058E-2,
	-4.88719292803767146341420376578964407137679E-3,
	 1.35556105548506177551787075080010874364481E-3,
	 8.22479226128438738077716511411289215554333E-2,
	 1.96032162333245006055759781563801382788772E-1,
	 1.16978483643172761847467585997387748702905E-1,
	-2.04825277456560976298590118654006438219828E-2,
	 7.98999189966233579720442148030827079362556E-3,
	-2.07562578486633419359528915758164772805896E-3,
	 8.77378719744515067137433602439480944914667E-2,
	 1.72390794624406967987712335438549785037145E-1,
	 2.54439495032001621324794183860176141227804E-1,
	 1.16978483643172761847467585997387748702919E-1,
	-1.56513758091757022708430246449433269580017E-2,
	 3.41432357674129871237641994523752520797226E-3,
	 8.43066851341001107446302003355663380197225E-2,
	 1.85267979452106975248330960684647699902265E-1,
	 2.23593811046099099964215226188215519533154E-1,
	 2.54257069579585109647429252519047957512695E-1,
	 9.01903932620346518924583784594290279152994E-2,
	-7.01124524079369066636422067695386937991294E-3,
	 8.64750263608499346324472067379289868304184E-2,
	 1.77526353208969968653987471088742034296804E-1,
	 2.39625825335829035595856428410992003968339E-1,
	 2.24631916579867772503496287486772348817226E-1,
	 1.95144512521266716260289347979378707272945E-1,
	 4.28311230947925862600740355431832233816507E-2
]).reshape([6,6])

B6 = np.array([
	 8.56622461895851725201480710863664467634204E-2,
	 1.80380786524069303784916756918858055830732E-1,
	 2.33956967286345523694935171994775497405871E-1,
	 2.33956967286345523694935171994775497405786E-1,
	 1.80380786524069303784916756918858055830787E-1,
	 8.56622461895851725201480710863664467634033E-2
])

# 12-th order Gauss-Legendre step
def gl12(f, y, dt):
	n = y.size; g = np.zeros([6,n])
	for k in range(0,16):
		g = np.matmul(A6, g)
		for i in range(0,6):
			g[i] = f(y + g[i]*dt)
	return y + np.dot(B6, g)*dt
